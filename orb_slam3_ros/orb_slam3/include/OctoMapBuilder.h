//
// Created by lacie on 03/02/2023.
//

#ifndef ORB_SLAM3_ROS_OCTOMAPBUILDER_H
#define ORB_SLAM3_ROS_OCTOMAPBUILDER_H

#include "System.h"
#include "Converter.h"
#include "ObjectDatabase.h"
#include "MergeSG.h"
#include "YoloDetection.h"

#include <octomap/ColorOcTree.h>
#include <octomap/Pointcloud.h>
#include <octomap/octomap.h>

#include <condition_variable>

#include <pcl/common/transforms.h>
#include <pcl/common/common.h>
#include <pcl/common/transforms.h>
#include <pcl/point_types.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl_ros/transforms.h>
#include <pcl_conversions/pcl_conversions.h>

using namespace ORB_SLAM3;

class OctoMapBuilder
{
public:
    OctoMapBuilder(double resolution_);
    ~OctoMapBuilder();

    void shutdown();

    void generateOctoMap();
    void generateObjectBoundingBox();
    void insertKeyFrame(KeyFrame *kf, cv::Mat &color, cv::Mat &depth);

    void SaveOctoMap(const char* filename);
    void LoadOctoMap(const char* filename);

    MergeSG* mpMergeSG;

protected:
    /**
    * @brief Runs all functionalities in a new thread
    */
    void publisher();

    /**
     * @brief Generates and publishes the pointcloud in a separate thread
     *
     * @param N Total number of all (keyframes, RGB-D images) inserted
     */
    void generateAndPublishOctoMap(size_t N);

    /**
     * @brief Calculates transformation matrix based on camera pose
     * and publishes it as a ROS tf message to transfrom the pointcloud to world coordinates
     *
     * @param cameraPose camera pose generated by ORB-SLAM3
     */
    void broadcastTransformMat(Eigen::Isometry3d cameraPose);

    bool checkDynamicPoint(cv::Point2f pt, std::vector<Object> objects);

    void GeneratePointCloud(KeyFrame* kf,
                            pcl::PointCloud<pcl::PointXYZRGB>& ground,
                            pcl::PointCloud<pcl::PointXYZRGB>& nonground);

    void GeneratePointCloud(KeyFrame* kf,
                            pcl::PointCloud<pcl::PointXYZRGB>& ground,
                            pcl::PointCloud<pcl::PointXYZRGB>& nonground,
                            std::vector<Object>& objects);

    void InsertScan(octomap::point3d sensorOrigin,
                    pcl::PointCloud<pcl::PointXYZRGB>& ground,
                    pcl::PointCloud<pcl::PointXYZRGB>& nonground);

    // Pending
    bool isSpeckleNode(const octomap::OcTreeKey &nKey);

    void UpdateOctomap(vector<KeyFrame*> vKFs);

    void heightMapColor(double h, double& r, double &g, double& b);

protected:
    bool shutDownFlag = false;
    std::mutex shutDownMutex;
    std::mutex keyFrameUpdateMutex;
    std::condition_variable keyFrameUpdated;

    boost::shared_ptr<thread> viewerThread;
    boost::shared_ptr<thread> octoThread;

    std::mutex keyframeMutex;
    uint16_t  lastKeyframeSize = 0;

private:
    // int last_obj_size;

    pcl::PointCloud<pcl::PointXYZRGB> observation;

    octomap::ColorOcTree *m_octree;
    octomap::KeyRay m_keyRay; // temp storage for casting
    octomap::OcTreeKey m_updateBBXMin;
    octomap::OcTreeKey m_updateBBXMax;

    double m_maxRange;
    bool m_useHeightMap;

    double m_colorFactor;
    double m_res;
    unsigned m_treeDepth;
    unsigned m_maxTreeDepth;
    bool bIsLocalization;


    octomap::OcTreeKey m_paddedMinKey, m_paddedMaxKey;
    inline static void updateMinKey(const octomap::OcTreeKey&in,
                                    octomap::OcTreeKey& min)
    {
        for(unsigned int i=0; i<3; i++)
            min[i] = std::min(in[i], min[i]);
    }
    inline static void updateMaxKey(const octomap::OcTreeKey&in,
                                    octomap::OcTreeKey& max)
    {
        for(unsigned int i=0; i<3; i++)
            max[i] = std::max(in[i], max[i]);
    }
};

#endif //ORB_SLAM3_ROS_OCTOMAPBUILDER_H
